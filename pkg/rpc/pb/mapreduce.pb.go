// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: mapreduce.proto

package rpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskType int32

const (
	TaskType_TaskNone   TaskType = 0 // no work yet; worker should wait and retry
	TaskType_TaskMap    TaskType = 1 // do a map task
	TaskType_TaskReduce TaskType = 2 // do a reduce task
	TaskType_TaskExit   TaskType = 3 // all done; worker should exit
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TaskNone",
		1: "TaskMap",
		2: "TaskReduce",
		3: "TaskExit",
	}
	TaskType_value = map[string]int32{
		"TaskNone":   0,
		"TaskMap":    1,
		"TaskReduce": 2,
		"TaskExit":   3,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreduce_proto_enumTypes[0].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_mapreduce_proto_enumTypes[0]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{0}
}

type GetTaskArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskArgs) Reset() {
	*x = GetTaskArgs{}
	mi := &file_mapreduce_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskArgs) ProtoMessage() {}

func (x *GetTaskArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskArgs.ProtoReflect.Descriptor instead.
func (*GetTaskArgs) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{0}
}

func (x *GetTaskArgs) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

type GetTaskReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          TaskType               `protobuf:"varint,1,opt,name=type,proto3,enum=rpc.proto.TaskType" json:"type,omitempty"` // what kind of task the worker should do
	MapId         int32                  `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`          // valid if Type==TaskMap
	ReduceId      int32                  `protobuf:"varint,3,opt,name=reduce_id,json=reduceId,proto3" json:"reduce_id,omitempty"` // valid if Type==TaskReduce
	Filename      string                 `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`                  // valid if Type==TaskReduce (input file)
	NMap          int32                  `protobuf:"varint,5,opt,name=n_map,json=nMap,proto3" json:"n_map,omitempty"`             // total number of map tasks
	NReduce       int32                  `protobuf:"varint,6,opt,name=n_reduce,json=nReduce,proto3" json:"n_reduce,omitempty"`    // total number of reduce tasks
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskReply) Reset() {
	*x = GetTaskReply{}
	mi := &file_mapreduce_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReply) ProtoMessage() {}

func (x *GetTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReply.ProtoReflect.Descriptor instead.
func (*GetTaskReply) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{1}
}

func (x *GetTaskReply) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TaskNone
}

func (x *GetTaskReply) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *GetTaskReply) GetReduceId() int32 {
	if x != nil {
		return x.ReduceId
	}
	return 0
}

func (x *GetTaskReply) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GetTaskReply) GetNMap() int32 {
	if x != nil {
		return x.NMap
	}
	return 0
}

func (x *GetTaskReply) GetNReduce() int32 {
	if x != nil {
		return x.NReduce
	}
	return 0
}

// for worker to respond when done with task
type ReportTaskArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          TaskType               `protobuf:"varint,1,opt,name=type,proto3,enum=rpc.proto.TaskType" json:"type,omitempty"` // TaskMap or TaskReduce
	MapId         int32                  `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ReduceId      int32                  `protobuf:"varint,3,opt,name=reduce_id,json=reduceId,proto3" json:"reduce_id,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	WorkerId      string                 `protobuf:"bytes,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTaskArgs) Reset() {
	*x = ReportTaskArgs{}
	mi := &file_mapreduce_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTaskArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskArgs) ProtoMessage() {}

func (x *ReportTaskArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskArgs.ProtoReflect.Descriptor instead.
func (*ReportTaskArgs) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{2}
}

func (x *ReportTaskArgs) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TaskNone
}

func (x *ReportTaskArgs) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *ReportTaskArgs) GetReduceId() int32 {
	if x != nil {
		return x.ReduceId
	}
	return 0
}

func (x *ReportTaskArgs) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReportTaskArgs) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

type ReportTaskReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTaskReply) Reset() {
	*x = ReportTaskReply{}
	mi := &file_mapreduce_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskReply) ProtoMessage() {}

func (x *ReportTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskReply.ProtoReflect.Descriptor instead.
func (*ReportTaskReply) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{3}
}

var File_mapreduce_proto protoreflect.FileDescriptor

const file_mapreduce_proto_rawDesc = "" +
	"\n" +
	"\x0fmapreduce.proto\x12\trpc.proto\"*\n" +
	"\vGetTaskArgs\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\"\xb7\x01\n" +
	"\fGetTaskReply\x12'\n" +
	"\x04type\x18\x01 \x01(\x0e2\x13.rpc.proto.TaskTypeR\x04type\x12\x15\n" +
	"\x06map_id\x18\x02 \x01(\x05R\x05mapId\x12\x1b\n" +
	"\treduce_id\x18\x03 \x01(\x05R\breduceId\x12\x1a\n" +
	"\bfilename\x18\x04 \x01(\tR\bfilename\x12\x13\n" +
	"\x05n_map\x18\x05 \x01(\x05R\x04nMap\x12\x19\n" +
	"\bn_reduce\x18\x06 \x01(\x05R\anReduce\"\xa4\x01\n" +
	"\x0eReportTaskArgs\x12'\n" +
	"\x04type\x18\x01 \x01(\x0e2\x13.rpc.proto.TaskTypeR\x04type\x12\x15\n" +
	"\x06map_id\x18\x02 \x01(\x05R\x05mapId\x12\x1b\n" +
	"\treduce_id\x18\x03 \x01(\x05R\breduceId\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x1b\n" +
	"\tworker_id\x18\x05 \x01(\tR\bworkerId\"\x11\n" +
	"\x0fReportTaskReply*C\n" +
	"\bTaskType\x12\f\n" +
	"\bTaskNone\x10\x00\x12\v\n" +
	"\aTaskMap\x10\x01\x12\x0e\n" +
	"\n" +
	"TaskReduce\x10\x02\x12\f\n" +
	"\bTaskExit\x10\x032\x8c\x01\n" +
	"\tMapReduce\x12:\n" +
	"\aGetTask\x12\x16.rpc.proto.GetTaskArgs\x1a\x17.rpc.proto.GetTaskReply\x12C\n" +
	"\n" +
	"ReportTask\x12\x19.rpc.proto.ReportTaskArgs\x1a\x1a.rpc.proto.ReportTaskReplyB\x1cZ\x1amapreduce/pkg/rpc/pb;rpcpbb\x06proto3"

var (
	file_mapreduce_proto_rawDescOnce sync.Once
	file_mapreduce_proto_rawDescData []byte
)

func file_mapreduce_proto_rawDescGZIP() []byte {
	file_mapreduce_proto_rawDescOnce.Do(func() {
		file_mapreduce_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mapreduce_proto_rawDesc), len(file_mapreduce_proto_rawDesc)))
	})
	return file_mapreduce_proto_rawDescData
}

var file_mapreduce_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mapreduce_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mapreduce_proto_goTypes = []any{
	(TaskType)(0),           // 0: rpc.proto.TaskType
	(*GetTaskArgs)(nil),     // 1: rpc.proto.GetTaskArgs
	(*GetTaskReply)(nil),    // 2: rpc.proto.GetTaskReply
	(*ReportTaskArgs)(nil),  // 3: rpc.proto.ReportTaskArgs
	(*ReportTaskReply)(nil), // 4: rpc.proto.ReportTaskReply
}
var file_mapreduce_proto_depIdxs = []int32{
	0, // 0: rpc.proto.GetTaskReply.type:type_name -> rpc.proto.TaskType
	0, // 1: rpc.proto.ReportTaskArgs.type:type_name -> rpc.proto.TaskType
	1, // 2: rpc.proto.MapReduce.GetTask:input_type -> rpc.proto.GetTaskArgs
	3, // 3: rpc.proto.MapReduce.ReportTask:input_type -> rpc.proto.ReportTaskArgs
	2, // 4: rpc.proto.MapReduce.GetTask:output_type -> rpc.proto.GetTaskReply
	4, // 5: rpc.proto.MapReduce.ReportTask:output_type -> rpc.proto.ReportTaskReply
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mapreduce_proto_init() }
func file_mapreduce_proto_init() {
	if File_mapreduce_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mapreduce_proto_rawDesc), len(file_mapreduce_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mapreduce_proto_goTypes,
		DependencyIndexes: file_mapreduce_proto_depIdxs,
		EnumInfos:         file_mapreduce_proto_enumTypes,
		MessageInfos:      file_mapreduce_proto_msgTypes,
	}.Build()
	File_mapreduce_proto = out.File
	file_mapreduce_proto_goTypes = nil
	file_mapreduce_proto_depIdxs = nil
}
