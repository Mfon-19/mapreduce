// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: mapreduce.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MapReduce_GetTask_FullMethodName    = "/rpc.proto.MapReduce/GetTask"
	MapReduce_ReportTask_FullMethodName = "/rpc.proto.MapReduce/ReportTask"
)

// MapReduceClient is the client API for MapReduce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapReduceClient interface {
	GetTask(ctx context.Context, in *GetTaskArgs, opts ...grpc.CallOption) (*GetTaskReply, error)
	ReportTask(ctx context.Context, in *ReportTaskArgs, opts ...grpc.CallOption) (*ReportTaskReply, error)
}

type mapReduceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceClient(cc grpc.ClientConnInterface) MapReduceClient {
	return &mapReduceClient{cc}
}

func (c *mapReduceClient) GetTask(ctx context.Context, in *GetTaskArgs, opts ...grpc.CallOption) (*GetTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskReply)
	err := c.cc.Invoke(ctx, MapReduce_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceClient) ReportTask(ctx context.Context, in *ReportTaskArgs, opts ...grpc.CallOption) (*ReportTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportTaskReply)
	err := c.cc.Invoke(ctx, MapReduce_ReportTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceServer is the server API for MapReduce service.
// All implementations must embed UnimplementedMapReduceServer
// for forward compatibility.
type MapReduceServer interface {
	GetTask(context.Context, *GetTaskArgs) (*GetTaskReply, error)
	ReportTask(context.Context, *ReportTaskArgs) (*ReportTaskReply, error)
	mustEmbedUnimplementedMapReduceServer()
}

// UnimplementedMapReduceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMapReduceServer struct{}

func (UnimplementedMapReduceServer) GetTask(context.Context, *GetTaskArgs) (*GetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedMapReduceServer) ReportTask(context.Context, *ReportTaskArgs) (*ReportTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTask not implemented")
}
func (UnimplementedMapReduceServer) mustEmbedUnimplementedMapReduceServer() {}
func (UnimplementedMapReduceServer) testEmbeddedByValue()                   {}

// UnsafeMapReduceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapReduceServer will
// result in compilation errors.
type UnsafeMapReduceServer interface {
	mustEmbedUnimplementedMapReduceServer()
}

func RegisterMapReduceServer(s grpc.ServiceRegistrar, srv MapReduceServer) {
	// If the following call pancis, it indicates UnimplementedMapReduceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MapReduce_ServiceDesc, srv)
}

func _MapReduce_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapReduce_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).GetTask(ctx, req.(*GetTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduce_ReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).ReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapReduce_ReportTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).ReportTask(ctx, req.(*ReportTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MapReduce_ServiceDesc is the grpc.ServiceDesc for MapReduce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapReduce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.proto.MapReduce",
	HandlerType: (*MapReduceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _MapReduce_GetTask_Handler,
		},
		{
			MethodName: "ReportTask",
			Handler:    _MapReduce_ReportTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapreduce.proto",
}
